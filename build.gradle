plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenCentral()
}

def allureVersion = '2.14.0',
    selenideVersion = '5.23.2',
    junitVersion = '5.7.2',
    restAssured = '4.4.0',
    jackson = '2.12.4',
    lombok = '1.18.20'


allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation("com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "io.rest-assured:rest-assured:${restAssured}",
            "com.fasterxml.jackson.core:jackson-databind:${jackson}",
            "org.aeonbits.owner:owner:1.0.12",
            "ch.qos.logback:logback-classic:1.2.5",
            "org.aspectj:aspectjweaver:1.9.7",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}")

    testCompileOnly "org.projectlombok:lombok:${lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties += System.properties
    systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.web.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.web.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }
    testLogging {
        lifecycle {
            events "passed", "failed"
//            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
}

task web(type: Test) {
    useJUnitPlatform {
        includeTags 'web'
    }
}

task api(type: Test) {
    useJUnitPlatform {
        includeTags 'api'
    }
}